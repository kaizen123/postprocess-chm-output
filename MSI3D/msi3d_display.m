function msi3d_display( Im,filename,compile )
% msi3d_display
%    Plots a variety of data pertaining to the output interpolations
%    generated by msi3d_cpd. The plots generated are as follows (from left
%    to right, top to bottom);
%        1. A grayscale overlay of all slices, including the two original
%        images and all interpolated images. Each image is coded to a
%        unique grayscale value, as displayed in the legend.
%        2. A plot of object area versus slice number, as determined by
%        regionprops.
%        3. A plot of object rotation versus slice number, as determined by
%        registry using rigid transformations with CPD.
%        4. A plot of the pixel location of the X centroid of each object
%        versus slice number, as determined by regionprops.
%        5. A plot of the pixel location of the Y centroid of each object
%        versus slice number, as determiend by regionprops.
%    If desired, images of the plot will be written to disk in both the
%    .eps and .tif formats.
%         
%    Input
%    --------------------
%    Im            Output image stack from msi3d_cpd.
%    filename      String specifying the filename to save images to. If a
%                  filename is not specified, images will not be saved to 
%                  disk.
%    compile       = 1, will compile CPD code. = 0, will not compile,
%                  assuming code has been previously compiled.
%
%    Example
%    --------------------
%    msi3d_display(msi3d_Out);
%

if nargin < 3; compile = 1; end
if nargin < 2; filename=''; end

% Compile CPD code
if compile == 1; compileCPD; end

% Generate pixel values corresponding to each iteration
[DimY DimX N] = size(Im);
M = floor(205/N);
P = [50+M.*(1:(N-1)) 255];
P = fliplr(P);

% Determine if the image stack is growing or shrinking in size
A_start = numel(find(Im(:,:,1) == 1));
A_end   = numel(find(Im(:,:,N) == 1));
if A_start >= A_end
    j = 1;
    k = N;
    inc = 1;
else
    j = N;
    k = 1;
    inc = -1;
end

Disp = Im(:,:,1);
h = figure;
set(h, 'Position', [0 0 1280 800])

subplot(4,2,7);
colormap('Gray');

for i = j:inc:k
    
    % Add slices to image at different grayscale values
    Idx = find( Im(:,:,i) ~= 0 );
    Disp(Idx) = P(i);
    
    % Compute statistics on each slice
    RP = regionprops(Im(:,:,i),'Area','Centroid');
    A(i) = RP.Area;
    C(i,:) = RP.Centroid; 
    if i == 1
        O(i) = 0;
    else
        O(i) = imregister_rotational(Im(:,:,1),Im(:,:,i),0);
    end
    
    % Create legend patches and text
    patch([i-1 i-1 i i],[0.75 0.9 0.9 0.75],P(i));
    if i == 1 | i == N; text(i-1 + 0.5,0.6,num2str(i)); end
end

patch([N N N+1 N+1],[0.75 0.9 0.9 0.75],0);
axis([-0.1 N 0 1]);
text(0,0.98,'Legend, Z =');
axis off; grid off;

subplot(4,2,[1:2:5]);
imshow(Disp,[]);

X = 1:size(A,2);
DX = (C(:,1) - C(1,1))';
DY = (C(:,2) - C(1,2))';

% Change interval of X tickmarks if X is too large to display every other
% tick properly
if N < 20
    xtick = [1:X(end)];
else
    xtick = [1:2:X(end)];
end

subplot(4,2,2);
set(gca, 'FontName', 'Arial');
plot(X,A,'ko','LineWidth',4); 
set(gca,'XTick',xtick);
axis([1 X(end) min(A)*0.5 max(A)*1.5]);
ylabel('Area (pix)');
linearRegression(X,A);

subplot(4,2,4)
plot(X,O,'ko','LineWidth',4); 
set(gca,'XTick',xtick,'Ytick',-90:45:90);
axis([1 X(end) -90 90]);
ylabel('Rotation (deg)');
linearRegression(X,O);

subplot(4,2,6)
plot(X,DX,'ko','LineWidth',4); 
set(gca,'XTick',xtick)
axis([1 X(end) -DimX DimX]);
ylabel('DX Centroid (pix)')
linearRegression(X,DX);

subplot(4,2,8)
plot(X,-DY,'ko','LineWidth',4); 
set(gca,'XTick',xtick)
axis([1 X(end) -DimY DimY]);
ylabel('DY Centroid (pix)');
linearRegression(X,-DY);

set(findall(h, '-property', 'FontSize'), 'FontSize', 11, 'fontWeight', 'bold')

% Write file to disk, if desired
if ~isempty(filename)
    options.Format='eps2';
    hgexport(h,[filename '.eps'],options);
    options.Format='tiff';
    hgexport(h,[filename '.tif'],options);
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

function linearRegression( X,Y )
    p = polyfit(X,Y,1);
    yfit = polyval(p,X);
    yresid = Y - yfit;
    SSresid = sum(yresid.^2);
    SStotal = (length(Y)-1) *var(Y);
    Rsq = 1 - SSresid/SStotal; 
    hold on;
    p = plot([X(1) X(end)],[yfit(1) yfit(end)],'r-','LineWidth',2);
    set(p,'Color',[0.25 0.25 0.25]);
    grid on;
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

end
